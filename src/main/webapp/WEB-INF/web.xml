<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">
  <display-name>ssm-demo</display-name>
  <!--**************************************全局范围内环境参数初始化******************************************-->
  <!-- 设置Spring容器加载所有的配置文件的路径 此时便是加载spring-mybatis.xml文件-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-mybatis.xml</param-value>
  </context-param>

  <!-- 设计路径变量值 -->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>springmvc.root</param-value>
  </context-param>

  <!-- 日志记录 -->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value>
  </context-param>

  <!--*******************************************监听器配置***********************************************-->
  <!-- 防止Spring内存溢出监听器  -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <!--配置spring的context监听器，ContextLoaderListener会读取spring的XML文件并产生 WebApplicationContext对象，然后将这个对象放置在
  ServletContext的属性里，这样我们只要可以得到Servlet就可 以得到WebApplicationContext对象，并利用这个对象访问spring 容器管理的bean-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!--*******************************************过滤器配置***********************************************-->
  <!-- Spring字符集过滤器，用来声明filter的相关设定,可以截取和修改一个Servlet或JSP页面的请求或从一个Servlet或JSP页面发出的响应 -->
  <filter>
    <filter-name>SpringEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--设置是否启用异步支持-->
    <async-supported>true</async-supported>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--用来定义filter所对应的URL-->
  <filter-mapping>
    <filter-name>SpringEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--*****************************************servlet配置*********************************************-->
  <!-- springMVC核心配置 -->
  <servlet>
    <!-- servlet名称，与servlet-mapping中的servlet-name必须一致 -->
    <servlet-name>dispatcherServlet</servlet-name>
    <!--指定servlet的类名称，这里配置了前端控制器-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--用来定义参数，可有多个init-param，在servlet类中通过getInitParamenter(String name)方法访问初始化参数-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <!--spingMVC的配置路径  spring-mvc.xml -->
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet-->
    <load-on-startup>1</load-on-startup>
    <!--设置是否启用异步支持-->
    <async-supported>true</async-supported>
  </servlet>
  <!--拦截设置 ，用来定义servlet所对应的URL-->
  <servlet-mapping>
    <!-- servlet名称，与上面中的servlet-name必须一致 -->
    <servlet-name>dispatcherServlet</servlet-name>
    <!-- servlet过滤的路径，也就是你在jsp中访问servlet时应该在action中填写的东西 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>/js/*</url-pattern>
      <url-pattern>/css/*</url-pattern>
      <url-pattern>/images/*</url-pattern>
      <url-pattern>/zTree/*</url-pattern>
  </servlet-mapping>
   -->



  <!--*************************************会话超时配置（单位为分钟）*****************************************-->
  <!--如果某个会话在一定时间未被访问，则服务器可以扔掉以节约内存-->
  <session-config>
    <session-timeout>120</session-timeout>
  </session-config>

  <!--******************************************欢迎页面配置**********************************************-->
  <welcome-file-list>
    <welcome-file>/WEB-INF/jsp/login.jsp</welcome-file>
  </welcome-file-list>

  <!--******************************************错误页面配置**********************************************-->
  <!-- 错误跳转页面 -->
<!--  <error-page>
    &lt;!&ndash; 路径不正确 &ndash;&gt;
    <error-code>404</error-code>
    <location>/WEB-INF/errorpage/404.jsp</location>
  </error-page>
  <error-page>
    &lt;!&ndash; 没有访问权限，访问被禁止 &ndash;&gt;
    <error-code>405</error-code>
    <location>/WEB-INF/errorpage/405.jsp</location>
  </error-page>
  <error-page>
    &lt;!&ndash; 内部错误 &ndash;&gt;
    <error-code>500</error-code>
    <location>/WEB-INF/errorpage/500.jsp</location>
  </error-page>-->
</web-app>